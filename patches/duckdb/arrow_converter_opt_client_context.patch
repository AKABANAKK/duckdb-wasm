diff --git a/src/common/arrow/arrow_converter.cpp b/src/common/arrow/arrow_converter.cpp
index a693034a92..a7d4b78889 100644
--- a/src/common/arrow/arrow_converter.cpp
+++ b/src/common/arrow/arrow_converter.cpp
@@ -59,10 +59,10 @@ void InitializeChild(ArrowSchema &child, DuckDBArrowSchemaHolder &root_holder, c
 }
 
 void SetArrowFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, const LogicalType &type,
-                    ClientProperties &options, ClientContext &context);
+                    ClientProperties &options, optional_ptr<ClientContext> context);
 
 void SetArrowMapFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, const LogicalType &type,
-                       ClientProperties &options, ClientContext &context) {
+                       ClientProperties &options, optional_ptr<ClientContext> context) {
 	child.format = "+m";
 	//! Map has one child which is a struct
 	child.n_children = 1;
@@ -77,18 +77,21 @@ void SetArrowMapFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child,
 }
 
 bool SetArrowExtension(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, const LogicalType &type,
-                       ClientContext &context) {
-	auto &config = DBConfig::GetConfig(context);
+                       optional_ptr<ClientContext> context) {
+	if (!context) {
+		return false;
+	}
+	auto &config = DBConfig::GetConfig(*context);
 	if (config.HasArrowExtension(type.id())) {
 		auto arrow_extension = config.GetArrowExtension(type.id());
-		arrow_extension.PopulateArrowSchema(root_holder, child, type, context, arrow_extension);
+		arrow_extension.PopulateArrowSchema(root_holder, child, type, *context, arrow_extension);
 		return true;
 	}
 	return false;
 }
 
 void SetArrowFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, const LogicalType &type,
-                    ClientProperties &options, ClientContext &context) {
+                    ClientProperties &options, optional_ptr<ClientContext> context) {
 	if (type.HasAlias()) {
 		// If it is a json type, we only export it as json if arrow_lossless_conversion = True
 		if (!(type.IsJSONType() && !options.arrow_lossless_conversion)) {
@@ -402,7 +405,7 @@ void ArrowConverter::ToArrowSchema(ArrowSchema *out_schema, const vector<Logical
 		root_holder->owned_column_names.push_back(AddName(names[col_idx]));
 		auto &child = root_holder->children[col_idx];
 		InitializeChild(child, *root_holder, names[col_idx]);
-		SetArrowFormat(*root_holder, child, types[col_idx], options, *options.client_context);
+		SetArrowFormat(*root_holder, child, types[col_idx], options, options.client_context);
 	}
 
 	// Release ownership to caller
